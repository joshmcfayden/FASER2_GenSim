9a10
> import csv
89a91,116
>     def apply_effs(self,couplings,masses,eff_data,eff_cut,nsignals):
>         # Brute-force loop over masses and couplings to find match in efficiency
>         for ic,coup in enumerate(couplings):
>             for im,mass in enumerate(masses):
>                 eff=1.0
> 
>                 # match entry
>                 for emass,ecoup,ecut,eff in eff_data:
>                     if abs((float(mass)-float(emass))/float(emass))<0.01 and abs((float(coup)-float(ecoup))/float(ecoup))<0.01 and float(eff_cut)==float(ecut):
>                         eff=float(eff)
> 
>                         print("Found cut eff:",ecut)
>                         break
> 
>                 # Efficiency not found
>                 if eff==-1:
>                     print("NOT FOUND:",masses[im],couplings[ic],eff_cut)
>                     eff=1.0
> 
>                 # Apply efficiency
>                 nsignals[im][ic]=nsignals[im][ic]*eff
> 
>         return nsignals
> 
> 
> 
916c943
<     def write_events(self, mass, coupling, energy, filename=None, numberevent=10, zfront=0, nsample=1, seed=None, decaychannels=None, notime=True, t0=0, modes=None, return_data=False, extend_to_low_pt_scales={}):
---
>     def write_events(self, mass, coupling, energy, filename=None, numberevent=10, zfront=0, nsample=1, seed=None, decaychannels=None, notime=True, t0=0, modes=None, return_data=False, extend_to_low_pt_scales={}, outdir=None):
945c972,975
<             while True:
---
>             #while True:
>             tries=0
>             # prevent from hanging
>             while tries<100000:
947a978,980
>             if tries==100000:
>                 print("ERROR: probility for ",decaychannels,"too low")
>                 return 1
965,966c998,1003
<         else: filename = self.model.modelpath + filename
<           
---
>         #else: filename = self.model.modelpath + filename
>         else:
>             if outdir:
>                 filename = outdir + "/" + filename
>             else:
>                 filename = self.model.modelpath + filename          
1004c1041
<             fs_label=14,
---
>             fs_label=14, eff_file=None,
1054a1092,1098
>         # check for efficiency file
>         eff_data=[]
>         if eff_file:
>             eff_incsv=open(eff_file)
>             eff_rows=csv.reader(eff_incsv)
>             eff_data=list(eff_rows)
> 
1057c1101,1105
<             filename, label, color, ls, alpha, level = setup
---
>             #filename, label, color, ls, alpha, level = setup
>             filename, label, color, ls, alpha, level, eff_cut = setup
>             if eff_file and len(filename.split('_eff'))>1:
>                 filename=filename.split('_eff')[0]+'.npy'
>                 
1059a1108,1111
> 
>             if eff_cut:
>                 nsignals=self.apply_effs(couplings,masses,eff_data,eff_cut,nsignals)           
>             
